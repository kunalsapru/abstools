import java.util.Collection;
import java.util.ArrayList;
import java.lang.String;
import abs.frontend.ifml.ChocoSolverIfml;
import abs.frontend.ast.Model;
import abs.frontend.ast.IfmlBoundaryInt;

import org.chocosolver.util.ESat;

aspect ChocoSolverIfml {

    public ChocoSolverIfml Model.instantiateCS4Model() {
    	ChocoSolverIfml chocoSolverIfml = new ChocoSolverIfml(this);

        // new int variable for all int variables
        for (java.util.Map.Entry<String, IfmlBoundaryInt[]> entry : ifmlints().entrySet()) {
            String st = entry.getKey();
            if (entry.getValue().length == 2) {
                IfmlBoundaryInt b1 = entry.getValue()[0];
                IfmlBoundaryInt b2 = entry.getValue()[1];
                chocoSolverIfml.addBoundedVar(st, b1, b2);
            }
            else {
                chocoSolverIfml.addSetVar(st, entry.getValue());
            }
        }
        for (String st : ifmlbools())
            chocoSolverIfml.addBoolVar(st);
        for (String st : ifmlfeatures())
            chocoSolverIfml.addBoolVar(st);
        for (String st : ifmlgroups())
            chocoSolverIfml.addBoolVar(st);
		for(String st : ifmlconstraints())
			chocoSolverIfml.addBoolVar(st);
		for(String st : ifmlstrings())
			chocoSolverIfml.addBoolVar(st);

        collectIfmlConstraints(chocoSolverIfml);
        return chocoSolverIfml;
    }

    // GENERAL NODE: propagate
    public void ASTNode.collectIfmlConstraints(ChocoSolverIfml chocoSolverIfml) {
        for(int i = 0; i < getNumChild(); i++)
            getChildNoTransform(i).collectIfmlConstraints(chocoSolverIfml);
    }

    public void CompilationUnit.collectIfmlConstraints(ChocoSolverIfml chocoSolverIfml) {
        super.collectIfmlConstraints(chocoSolverIfml);
    }    

    //Returns IfmlGroupDecl object based on feature name. As per semantics, one feature can be part of a single group only. 
    public IfmlGroupDecl Model.getIfmlGroupDecl(String featureName){
    	IfmlGroupDecl ifmlGroupDecl = null;
    	//Iterating over no of compilation units
    	for(int i=0;i<getNumCompilationUnit();i++) {
    		CompilationUnit compilationUnit = getCompilationUnit(i);
    		//Iterating over number of igroups
    		for(int j=0;j<compilationUnit.getNumIfmlGroupDecl();j++) {
    			IfmlGroupDecl tempIfmlGroupDecl = compilationUnit.getIfmlGroupDecl(j);
    			//Iterating over all features inside this group
    			for(int k=0;k<tempIfmlGroupDecl.getNumIfmlGroupDeclFeature();k++) {
    				IfmlGroupDeclFeature ifmlGroupDeclFeature = tempIfmlGroupDecl.getIfmlGroupDeclFeature(k);
    				//If feature name matches the name in the argument, set ifmlGroupDecl to tempIfmlGroupDecl
    				if(ifmlGroupDeclFeature.getIfmlFeatVar().getIfmlFName().equals(featureName)) {
    					ifmlGroupDecl = tempIfmlGroupDecl;
    				}
    			}
    		}
    	}
    	return ifmlGroupDecl;
    }
    
    //Returns IfmlGroupDecl object based on feature name. As per semantics, one feature can be part of a single group only. 
    public IfmlGroupDecl Model.getIfmlGroupDeclByGroupName(String groupName){
    	IfmlGroupDecl ifmlGroupDecl = null;
    	//Iterating over no of compilation units
    	for(int i=0;i<getNumCompilationUnit();i++) {
    		CompilationUnit compilationUnit = getCompilationUnit(i);
    		//Iterating over number of igroups
    		for(int j=0;j<compilationUnit.getNumIfmlGroupDecl();j++) {
    			IfmlGroupDecl tempIfmlGroupDecl = compilationUnit.getIfmlGroupDecl(j);
    			if(tempIfmlGroupDecl.getName().equals(groupName)) {
    				ifmlGroupDecl = tempIfmlGroupDecl;
    			}
    		}
    	}
    	return ifmlGroupDecl;
    }
    
	//Returns list of all features inside a group
	public ArrayList<String> IfmlGroupDecl.getFeatureNames(){
		ArrayList<String> listOfFeatures = new ArrayList<String>();
		//Iterating over all features inside this group
		for(int i=0;i<getNumIfmlGroupDeclFeature();i++) {
			IfmlGroupDeclFeature ifmlGroupDeclFeature = getIfmlGroupDeclFeature(i);
			listOfFeatures.add(ifmlGroupDeclFeature.getIfmlFeatVar().getIfmlFName());
		}
		return listOfFeatures;
	}
	
	//Get all IfmlConstraintDecl objects
	public ArrayList<IfmlConstraintDecl> Model.getIfmlConstraintDeclList(){
		ArrayList<IfmlConstraintDecl> ifmlConstraintDeclList = new ArrayList<IfmlConstraintDecl>();
		for(int i=0;i<getNumCompilationUnit();i++) {
    		CompilationUnit compilationUnit = getCompilationUnit(i);
    		//Iterating over number of iconstraints
    		for(int j=0;j<compilationUnit.getNumIfmlConstraintDecl();j++) {
    			ifmlConstraintDeclList.add(compilationUnit.getIfmlConstraintDecl(j));
    		}
		}
		return ifmlConstraintDeclList;
	}
	
	//Get all feature constraints inside a constraint object
	public ArrayList<IfmlConstraint> Model.getAllFeatureConstraints(String featureName){
		ArrayList<IfmlConstraint> ifmlFeatureConstraints = new ArrayList<IfmlConstraint>();
		ArrayList<IfmlConstraintDecl> ifmlConstraintDeclList = getIfmlConstraintDeclList();
		for(int i=0;i<ifmlConstraintDeclList.size();i++) {
			IfmlConstraintDecl ifmlConstraintDecl = ifmlConstraintDeclList.get(i);
			for(int j =0; j<ifmlConstraintDecl.getNumIfmlConstraintDeclGroupFeature();j++){
				IfmlConstraintDeclGroupFeature ifmlConstraintDeclGroupFeature = ifmlConstraintDecl.getIfmlConstraintDeclGroupFeature(j);
				if(ifmlConstraintDeclGroupFeature.getName().equals(featureName)){
					for(int k=0;k<ifmlConstraintDeclGroupFeature.getNumIfmlConstraint();k++) {
						IfmlConstraint ifmlConstraint = ifmlConstraintDeclGroupFeature.getIfmlConstraint(k);
						ifmlFeatureConstraints.add(ifmlConstraint);
					}
				}
			}
		}
		return ifmlFeatureConstraints;
	}
	//Get all group constraints inside a constraint object
	public ArrayList<IfmlConstraint> Model.getAllGroupConstraints(String groupName){
		ArrayList<IfmlConstraint> ifmlGroupConstraints = new ArrayList<IfmlConstraint>();
		ArrayList<IfmlConstraintDecl> ifmlConstraintDeclList = getIfmlConstraintDeclList();
		for(int i=0;i<ifmlConstraintDeclList.size();i++) {
			IfmlConstraintDecl ifmlConstraintDecl = ifmlConstraintDeclList.get(i);
			for(int j =0; j<ifmlConstraintDecl.getNumIfmlConstraintDeclGroupFeature();j++){
				IfmlConstraintDeclGroupFeature ifmlConstraintDeclGroupFeature = ifmlConstraintDecl.getIfmlConstraintDeclGroupFeature(j);
				if(ifmlConstraintDeclGroupFeature.getName().equals(groupName)){
					for(int k=0;k<ifmlConstraintDeclGroupFeature.getNumIfmlConstraint();k++) {
						IfmlConstraint ifmlConstraint = ifmlConstraintDeclGroupFeature.getIfmlConstraint(k);
						ifmlGroupConstraints.add(ifmlConstraint);
					}
				}
			}
		}
		return ifmlGroupConstraints;
	}
	
	//Get group cardinality
	public IfmlCardinality Model.getGroupCardinality(String groupName){
		IfmlCardinality ifmlCardinality = null;
		ArrayList<IfmlConstraintDecl> ifmlConstraintDeclList = getIfmlConstraintDeclList();
		for(int i=0;i<ifmlConstraintDeclList.size();i++) {
			IfmlConstraintDecl ifmlConstraintDecl = ifmlConstraintDeclList.get(i);
			for(int j =0; j<ifmlConstraintDecl.getNumIfmlConstraintDeclGroupFeature();j++){
				IfmlConstraintDeclGroupFeature ifmlConstraintDeclGroupFeature = ifmlConstraintDecl.getIfmlConstraintDeclGroupFeature(j);
				if(ifmlConstraintDeclGroupFeature.getName().equals(groupName)){
					if(ifmlConstraintDeclGroupFeature.hasIfmlCard()){
						ifmlCardinality = ifmlConstraintDeclGroupFeature.getIfmlCard();
					}
				}
			}
		}
		return ifmlCardinality;
	}
	
	//Get pretty name for cardinality 
	public String IfmlCardinality.getIfmlCardinalityPrettyName() {
		String strCardinality = "";
        if(this instanceof IfmlAllOf){
        	strCardinality = "allof"; 
        } else if(this instanceof IfmlMinim){
            strCardinality = "["+((IfmlMinim) this).getIfmlCFrom()+"..*]";
        } else if(this instanceof IfmlCRange){
            if(((IfmlCRange) this).getIfmlCFrom() == 1 && ((IfmlCRange) this).getIfmlCTo() == 1){
                strCardinality = "oneof";
            } else {
                strCardinality = "["+((IfmlCRange) this).getIfmlCFrom()+".."+
                        ((IfmlCRange) this).getIfmlCTo()+"]";
            }
        }
        
        return strCardinality;
	}
	
}